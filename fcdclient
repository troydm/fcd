#!/usr/bin/env perl
# fcdclient - faster cd client script
# written in Perl and licensed under MIT terms and conditions
# (C) 2017-2021 Dmitry "troydm" Geurkov (d.geurkov@gmail.com)

use 5.010;
use strict;
use warnings;
use utf8;
use Cwd qw(cwd);
use IO::Socket::UNIX;
use Term::ANSIColor qw(colored);

# config
my @prompt;
if ( exists $ENV{'FCD_PROMPT'} ) {
    my $prompt = $ENV{'FCD_PROMPT'};
    utf8::decode($prompt);
    @prompt = split q(,), $prompt;
}
else {
    @prompt = ( 'rgb543 on_grey4', ' 󰜥 ', 'grey4', '' );
}
my @dir_colors;
if ( exists $ENV{'FCD_DIR_COLORS'} ) {
    my $dir_colors = $ENV{'FCD_DIR_COLORS'};
    utf8::decode($dir_colors);
    @dir_colors = split q(,), $dir_colors;
}
else {
    @dir_colors = ( 'rgb543', 'reset' );
}

sub trim {
    my ($s) = @_;
    $s =~ s/^\s+|\s+$//gx;
    return $s;
}

sub common_prefix {
    my ($start, $dirs) = @_;
    my $newstart = $start;
    while ($newstart) {
        if ( (length $start) + 1 > length $dirs->[0] ) {
            last;
        }
        $newstart = substr $dirs->[0], 0, (length $start) + 1;
        for my $dir (@{$dirs}) {
            unless ($dir =~ /^\Q$newstart\E/x) {
                $newstart = undef;
                last;
            }
        }
        if ($newstart) {
            $start = $newstart;
        }
    }
    return $start;
}

sub prompt_update {
    my ($i, $old, $j, $new) = @_;
    if ($i > 0) {
        print "\033[${i}D";
    }
    print colored( [$dir_colors[-d trim($new) ? 0 : 1]], $new );
    $i = (length $old) - (length $new);
    if ($i > 0) {
        print ' ' x $i;
    } else {
        $i = 0;
    }
    $i = $j - $i - (length $new);
    if ($i > 0) {
        print "\033[${i}C";
    } elsif ($i < 0) {
        $i = -$i;
        print "\033[${i}D";
    }
    return ($new, $j);
}

sub dir_suggestions_clear {
    my ($return, $col_pos, $dir_suggestions) = @_;
    my $count = scalar @{$dir_suggestions};
    if ($count > 0) {
        print "\033[${col_pos}D";
        my $i = $count;
        while ($i > 0) {
            print "\033[1B\033[K";
            $i--;
        }
        print "\033[${count}A\033[${col_pos}C";
    }
    return ();
}

sub dir_suggestions_update {
    my ($return, $col_pos, $dir_suggestions, $new_suggestions) = @_;
    if ( @{$dir_suggestions} == @{$new_suggestions} ) {
        my $i = 0;
        while ($i < @{$new_suggestions}) {
            unless ( $new_suggestions->[$i] eq $dir_suggestions->[$i] ) {
                last;
            }
            $i++;
        }
        if ($i == @{$new_suggestions}) {
            return @{$new_suggestions};
        }
    }
    dir_suggestions_clear($return, $col_pos, $dir_suggestions);
    if (@{$new_suggestions} > 0) {
        my $count = 0;
        print "\033[${col_pos}D";
        for my $suggestion (@{$new_suggestions}) {
            print "\033[1B".(colored([$dir_colors[0]], $suggestion))."\033[".(length $suggestion)."D";
            $count++;
        }
        print "\033[${count}A\033[${col_pos}C";
    }
    return @{$new_suggestions};
}

sub complete {
    my ($prompt,$prompt_len,$dirs) = @_;

    # detect stty
    my ($stty, $tty_raw_noecho, $tty_restore, $tty_safe_restore) = ();
    foreach my $s (qw(/bin/stty /usr/bin/stty)) {
        if (-x $s) {
            $tty_raw_noecho = "$s raw -echo";
            $tty_restore    = "$s -raw echo";
            $tty_safe_restore = $tty_restore;
            $stty = $s;
            last;
        }
    }

    # save current tty state
    my $tty_saved_state = qx($stty -g 2>/dev/null);
    if ($?) {
        # stty -g not supported
        $tty_saved_state = undef;
    }
    else {
        $tty_saved_state =~ s/\s+$//gx;
        $tty_restore = qq($stty "$tty_saved_state" 2>/dev/null);
    }

    say $prompt;
    for my $dir (@{$dirs}) {
        say colored([$dir_colors[0]], $dir);
    }
    my @dir_suggestions = @{$dirs};
    print "\033[".(@dir_suggestions + 1)."A\033[${prompt_len}C";

    # tty noecho
    system $tty_raw_noecho if defined $tty_raw_noecho;

    my $return = '';
    my $buffer = '';
    my $i = 0;
    local $_;
    while ( ($_ = getc(STDIN)) ne "\r" ) {
        if ($buffer) {
            $buffer .= $_;
            # up or down key
            if ($buffer eq "\033\133\101" || $buffer eq "\033\133\102") {
                if ( @dir_suggestions == 0 ) {
                    print "\007";
                }
                else {
                    my $j;
                    unless ($return) {
                        $j = -1;
                    }
                    else {
                        $j = 0;
                        for my $dir (@dir_suggestions) {
                            if ($dir eq $return) {
                                last;
                            }
                            $j++;
                        }
                        if ($j >= @dir_suggestions) {
                            $j = $#dir_suggestions;
                            for my $dir (reverse @dir_suggestions) {
                                if ($dir =~ /^\Q$return\E/x) {
                                    last;
                                }
                                $j--;
                            }
                        }
                        if ($j >= @dir_suggestions) {
                            $j = -1;
                        }
                    }
                    $j = $buffer eq "\033\133\101" ? $j - 1 : $j + 1;
                    if ($j < 0) {
                        $j = $#dir_suggestions;
                    }
                    elsif ($j > $#dir_suggestions) {
                        $j = 0;
                    }
                    ($return, $i) = prompt_update($i, $return, length $dir_suggestions[$j], $dir_suggestions[$j]);
                }
                $buffer = '';
            }
            # left key
            elsif ($buffer eq "\033\133\104") {
                if ($i > 0) {
                    print "\033[1D";
                    $i--;
                }
                $buffer = '';
            }
            # right key
            elsif ($buffer eq "\033\133\103") {
                if ($i < length $return) {
                    print "\033[1C";
                    $i++;
                }
                $buffer = '';
            }
            # delete key
            elsif ($buffer eq "\033\133\063\176") {
                if ($i < length $return) {
                    ($return, $i) = prompt_update($i, $return, $i, (substr $return, 0, $i).(substr $return, $i + 1));
                    my @possible_suggestions = grep { $_ =~ /\Q$return\E/xi } @{$dirs};
                    @dir_suggestions = dir_suggestions_update($return, $i + $prompt_len, \@dir_suggestions, $return eq '' ? $dirs : \@possible_suggestions);
                }
                $buffer = '';
            }
            # unknown escape sequence
            elsif (length $buffer >= 4) {
                print "\007";
                $buffer = '';
            }
        }
        # tab
        elsif (ord == 9) {
            unless ($return) {
                ($return, $i) = prompt_update($i, $return, length $dirs->[0], $dirs->[0]);
                @dir_suggestions = dir_suggestions_clear($return, $i + $prompt_len, \@dir_suggestions);
            }
            else {
                if (length $return == $i) {
                    my @comp = grep { $_ =~ /^\Q$return\E/x } @{$dirs};
                    if (@comp == 0) {
                        print "\007";
                    }
                    elsif (@comp == 1) {
                        ($return, $i) = prompt_update($i, $return, length $comp[0], $comp[0]);
                        @dir_suggestions = dir_suggestions_clear($return, $i + $prompt_len, \@dir_suggestions);
                    }
                    elsif (@comp > 1) {
                        my $prefix = common_prefix($return,\@comp);
                        ($return, $i) = prompt_update($i, $return, length $prefix, $prefix);
                        @dir_suggestions = dir_suggestions_update($return, $i + $prompt_len, \@dir_suggestions, \@comp);
                    }
                }
                else {
                    print "\007";
                }
            }
        }
        # ctrl+c or ctrl+d
        elsif (ord == 3 || ord == 4) {
            $return = '';
            last;
        }
        # escape sequence
        elsif ( ord == 27 ) {
            $buffer .= $_;
        }
        # ctrl+w
        elsif ( ord == 23 ) {
            if ($i > 0 && length $return > 0) {
                my $j = $i;
                while ($j > 0) {
                    $j--;
                    my $c = substr $return, $j, 1;
                    if ($c eq ' ' || $c eq '/') {
                        if ($j + 1 != $i) {
                            $j++;
                        }
                        last;
                    }
                }
                if ($i != $j) {
                    my $remove = (substr $return, 0, $j).(substr $return, $i);
                    ($return, $i) = prompt_update($i, $return, $j, $remove);
                    my @possible_suggestions = grep { $_ =~ /^\Q$return\E/x } @{$dirs};
                    @dir_suggestions = dir_suggestions_update($return, $i + $prompt_len, \@dir_suggestions, $return eq '' ? $dirs : \@possible_suggestions);
                }
            }
        }
        # backspace
        elsif ( ord == 127 ) {
            if ($i > 0 && length $return > 0) {
                ($return, $i) = prompt_update($i, $return, $i-1, (substr $return, 0, $i-1).(substr $return, $i));
                my @possible_suggestions = grep { $_ =~ /\Q$return\E/xi } @{$dirs};
                @dir_suggestions = dir_suggestions_update($return, $i + $prompt_len, \@dir_suggestions, $return eq '' ? $dirs : \@possible_suggestions);
            }
        }
        # any character
        elsif ( ord >= ord(' ') ) {
            if (length $return == $i) {
                ($return, $i) = prompt_update($i, $return, $i+1, $return.$_);
            }
            else {
                ($return, $i) = prompt_update($i, $return, $i+1, (substr $return, 0, $i).$_.(substr $return, $i));
            }
            my @possible_suggestions = grep { $_ =~ /\Q$return\E/xi } @{$dirs};
            @dir_suggestions = dir_suggestions_update($return, $i + $prompt_len, \@dir_suggestions, $return eq '' ? $dirs : \@possible_suggestions);
        }
    }

    dir_suggestions_clear($return, $i + $prompt_len, \@dir_suggestions);
    print "\033[".($i + $prompt_len)."D\033[K";

    # restore tty
    system $tty_restore;
    if ($?) {
        system $tty_safe_restore;
    }

    return $return;
}

my $dir;
if (@ARGV) {
    $dir = join q{/}, @ARGV;
}
else {
    $dir = $ENV{'HOME'};
}

my $wd          = cwd();
my $user        = getpwuid $<;
my $socket_path = "/tmp/fcd_$user.sock";
my $out_path    = "/tmp/fcd_$user";

my $socket;
my $fcdserver_started = 0;

while (1) {
    $socket = IO::Socket::UNIX->new(
        Type => SOCK_STREAM(),
        Peer => $socket_path,
    );
    if ($socket) {
        last;
    }
    else {
        if ( $fcdserver_started == 0 ) {
            system 'fcdserver';
        }
        $fcdserver_started = 1;
    }
}

binmode STDOUT, ':encoding(UTF-8)';
binmode $socket, ':encoding(UTF-8)';

$socket->autoflush(1);
print {$socket} "$wd\n$dir\n";
chomp( my $found_size = <$socket> );
my $found;
if ( $found_size == 0 ) {
    $found = $dir;
}
elsif ( $found_size == 1 ) {
    chomp( $found = <$socket> );
}
else {
    my @dirs;
    while ( $found_size > 0 ) {
        chomp( my $line = <$socket> );
        push @dirs, $line;
        $found_size--;
    }
    @dirs = sort @dirs;
    my $prompt = '';
    my $prompt_len = 0;
    my $i      = 0;
    while ( $i < @prompt ) {
        $prompt .= colored( [ $prompt[$i] ], $prompt[ $i + 1 ] );
        $prompt_len += length $prompt[ $i + 1 ];
        $i = $i + 2;
    }
    my $select = complete( $prompt . ' ', $prompt_len + 1, \@dirs );
    $found = '';
    if ($select) {
        $select = trim($select);
        if ( -d $select ) {
            $found = $select;
        }
        unless ($found) {
            my @p = split ' ', $select;
            for my $d (@dirs) {
                $found = $d;
                for my $p (@p) {
                    if ( $d =~ /\Q$p\E(.*)/xi ) {
                        $d = $1;
                    }
                    else {
                        $found = '';
                        last;
                    }
                }
                if ($found) {
                    last;
                }
            }
        }
    }
    say {$socket} $found;
    $found = $dir unless $found;
}
close $socket;

if ( open my $fh, '>', $out_path ) {
    print {$fh} $found;
    close $fh;
}
